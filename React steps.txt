steps to create a react application
---------------------------------------------------
step1:- create a folder

step 2:- npm install -g create-react-app

step 3:- create-react-app helloworld

step 4:-cd helloworld

step 5:-npm start
-----------------------------------Browser------------------------
step 6:-localhost:3000
---------------------------------------------------------
automatically the 
1)app.js
2)app.css are created .modify these files according to your requirements.
3)node_module is created .It contains the library file.
4)index.html 
5)package.json :- it conatins the library versions installed.
6)main.js
-----------------------------------------------------------------------------

example-1
-----------------------
app.js
------------------
import React, {Component} from 'react';
import './App.css';

class App extends Component
{
render()
{
  return(
<div className='App'>
<h1>Hello Welcome to React JS</h1><hr></hr>
<table>
<tr><td>Enter your Name</td><td><input type="text" name="t1" size="20"/></td></tr>
<tr><td>Enter your Address</td><td><input type="text" name="t2" size="20"/></td></tr>
<tr><td>Enter your Phoneno</td><td><input type="text" name="t3" size="20"/></td></tr>
<tr><td>Enter your Email</td><td><input type="text" name="t4" size="20"/></td></tr>
<tr><td></td><td><input type="submit" value="submit"/></td></tr>
</table>
<h2>The sum is {12+5}</h2>
<h2>The subtraction {12-5}</h2>
<h2>The multipliaction {12*5}</h2>
<h2>The division is {12 / 6}</h2>

</div>
  );
}
}

export default App;
--------------------------------------------------------------------------------------------------------------
app.css
---------------
h1{
  color:red;
}
----------------------------------------------
to see the o/p:- localhost:3000
-------------------------------------------------
Features of React
--------------------------
1)JSX
2)Components
3)One-way Data Binding
4)Virtual DOM
5)performance
6)simplicity
----------------------------------------------
1)JSX stands for javascript XML. It is a Javascript with XML and HTML syntax.
This syntax is processed into javascript and called Rect Framework.

2)ReactJs is all about components.React Js application is made of multiple components,and each component has its own logic and controls.
 
why we are using JSX
1)It is faster than regular javascript .
2)Instead of separating technologies by putting markup and logic in separate files,react uses components that contain both.
3)it is type-safe and errors are found at compilation time.


import React, {Component} from 'react';
class App2 extends Component
{
render()
{
return(
<div>
<h1>Welcome to ReactJs</h1>
<h2>Welcome to ReactJs</h2>
<p>Welcome to ReactJs on Sunday</p>
<p>The sum of 2 nos :- </p><p>{25+24}</p>

</div>
);
}
}
export default App2;
---------------------------------------------------------------------

example-2
-------------------
import React, {Component} from 'react';
import './App.css';

class App1 extends Component
{
render()
{
  return(
<div>
<h1>Hello Welcome to React JS</h1><hr></hr>
<table>
<tr><td>Enter your Name</td><td><input type="text" name="t1" size="20"/></td></tr>
<tr><td>Enter your Address</td><td><input type="text" name="t2" size="20"/></td></tr>
<tr><td>Enter your Phoneno</td><td><input type="text" name="t3" size="20"/></td></tr>
<tr><td></td><td><input type="submit" value="submit"/></td></tr>
</table>
</div>
  );
}
}

export default App1;
--------------------------------------------------------------
example-3
------------------
import React, {Component} from 'react';
class App2 extends Component
{
render()
{
return(
<div>
<h1>Welcome to ReactJs</h1>
<h2>Welcome to ReactJs</h2>
<p>Welcome to ReactJs on Sunday</p>
<p>The sum of 2 nos :- </p><p>{25+24}</p>

</div>
);
}
}
export default App2;
----------------------------------------------------------------
example-4
---------------------
import React from 'react';
class App3 extends React.Component
{
    render()
    {
        var a=prompt("Enter a number");
        var b=prompt("Enter a number");
        return (
<div>
<h1>The sum is :{parseFloat(a)+parseFloat(b)}</h1>
<h1>The sub is :{parseFloat(a)-parseFloat(b)}</h1>
<h1>The mul is :{parseFloat(a)*parseFloat(b)}</h1>
<h1>The div is :{parseFloat(a)/parseFloat(b)}</h1>
</div>
       );
   
    }
}
export default App3;
----------------------------------------------
index.js
---------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import App1 from './App1';
import App2 from './App2';
import App3 from './App3';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
<div><App/><App1/><App2/><App3/></div>
  </React.StrictMode>
);
reportWebVitals();

----------------------------------------------------------------------------------------
example-5
---------------------
inline css example
------------------------------
import React, {Component} from 'react';
class App4 extends Component
{
render()
{
 var mystyle={
    fontSize:20,
    color:'green'
}
  return(
    <div>
<h3 style ={mystyle}>Welcome to ReactJs </h3>
<h3 style ={mystyle}>Welcome to ReactJs on Weekend Batch</h3>
    </div>
  );
}
}

export default App4;
--------------------------------------------
example-6
--------------------
import React,{Component} from 'react';
class App extends Component{
  render(){
    return(
    <div>
<h1 className="MyReact">{35+56}</h1>

    </div>
    );
  }
}

export default App;
--------------------------------------------------
React Component
---------------------------------
Every react component is a core building block of the react application.
Every react component have their own structure ,methods as well as APIs.
They can be reused as per requirement.
 Here root is the starting component, and each of the other pieces becomes branches which are further divided into sub branches.

There are two types of components in react.
1)functional component:- It is also known as stateless component because they do not hold or manage state.
2)class component:- They are more complex than functional components.It is required to extend from React.Component.
we can create a class by defining a class that extends component and has a render function.
The class component is also known as stateful component  because that can hold or manage the local state.
------------------------------------------------------------------------------
example-7
----------------
import React,{ Component } from 'react';
import './App.css';
class App extends React.Component{
  render(){
    return(
    <div>
<h1><center>Example of class</center> </h1>
<First/>
<Second/>
    </div>
    );
  }
}
class First extends React.Component{
  render() {
    return(
<div>
<h2>This is an example of First React class Component</h2>
</div>
    );
  }
}
class Second extends React.Component{
  render()  {
    return(
<div>
<h2>This is an example of Second React class Component</h2>
</div>
    );
  }
}

export default App;
------------------------------------------------------------------
The class component is also known as stateful component  because that can hold or manage the local state.
state :-
1)State can be changed and mutable.
2)It cannot be accessed by child component.
3)It cannot make component reusable.
4)Stateless component cannot have state.
props:-
1)props are readonly and immutable
2)It can be accesed by child component.
3)It  make component reusable.
4)Stateless component can have props.
----------------------------------------------------------------------------------
constructor():- It is a method used to initialize an object state in a class.It is automatically called during the creation of an object in a class.It is called before the component is mounted.
---------------------------------------------------------------------------------------------------
React Map :- it is  a collection type where data is stored in the form of pairs.It contains a unique key.The value stored in the map should be mapped to the key.It cannot store dupilcate pair in the map.It is used for storing and searching of data.
---------------------------------------------------------------------------

example-8
----------------------
import React, { Component } from 'react';  
class App extends React.Component {  
 constructor() {  
      super();  
      this.state = {  
         data:   
         [  { "name":"Akshya" ,"address":"Bangalore"},{"name":"Partiksha","address":"Bangalore"},{"name":"Sandip","address":"Bangalore"}]  
      }  
   }  
   render() {  
      return (  
         <div>  
            <StudentName/>  
            <ul>            
                {this.state.data.map((item) => <List data = {item} />)}           
            </ul>  
         </div>  
      );  
   }  
}  
class StudentName extends React.Component {  
   render() {  
      return (  
         <div>  
            <h1>Student Name Detail</h1>  
         </div>  
      );  
   }  
}  
class List extends React.Component {  
   render() {  
      return (  
         <ul>            
            <li>{this.props.data.name} stays in {this.props.data.address}</li>   
            
         </ul>  
      );  
   }  
}  

export default App;  
---------------------------------------------------------------------------

Changing the state:-
We can change the component state by using the setState() method and passing a new state object as the argument. Now, create a new method toggleDisplayBio() in the above example and bind this keyword to the toggleDisplayBio() method otherwise we can't access this inside toggleDisplayBio() method.
--------------------------------------------------
example of state
------------------------------------------------
import React, { Component } from 'react';

class Counter extends Component {
  constructor() {
    super();
    this.state = {
      count: 0,
    };
  }

  incrementCount() {
    // To update the state, use this.setState()
    this.setState({ count: this.state.count + 1 });
  }

  render() {
    return (
      <div>
        <p>Count: {this.state.count}</p>
        <button onClick={() => this.incrementCount()}>Increment</button>
      </div>
    );
  }
}

export default Counter;
-----------------------------------------------------------------------------------------------------------------------
example-9
---------------------
import React, { Component } from 'react';  
class App extends React.Component {  
 constructor() {  
      super();        
      this.state = { 
        displayMore: false ,
           };  
      console.log('Component To Display less or more', this);  
      this.toggleDisplayMore = this.toggleDisplayMore.bind(this);  
      }  
      toggleDisplayMore(){  
          this.setState({displayMore: !this.state.displayMore});  
          }  
      render() {  
          return (  
              <div>  
                  <h1>Welcome to React Js This is an Example of State </h1>  
                  {  
                      this.state.displayMore ? (   
                          <div>  
                              <p><h4>This is an example of State.</h4></p>  
                              <p><h4>ReactJs is one of the best Frontend Available in the market.</h4></p>  
                              <button onClick={this.toggleDisplayMore}> Show Less </button>  
                        </div>  
                          ) : (  
                              <div>  
                                  <button onClick={this.toggleDisplayMore}> Read More </button>  
                              </div>  
                          )  
                  }  
             </div>  
        )  
    }  
}  
export default App;  
--------------------------------------------------------------------------------------------------
example-10
-------------------------
loops array in react
------------------------------------------------
import React from 'react';  
     
function App() {  
     
  const myArray = ['January', 'February', 'March', 'April', 'May','June'];  
    
  return (  
    <div className="container">     
        <h1> Example of React Map Loop </h1>  
     
        {myArray.map(name => (  
          <li>  
            {name}  
          </li>  
        ))}  
     
    </div>  
  );  
}  
     
export default App;  
-----------------------------------------------------------------------------------
example-11
-------------------
import React from 'react';  
    
function App() {  
    
 const students = [  
              {  
                'id': 1,   
                'name': 'Jack',   
                'email': 'jack@gmail.com'  
              },  
              {  
                'id': 2,   
                'name': 'Mary',   
                'email': 'mary@gmail.com'  
              },  
              {  
                'id': 3,   
                'name': 'John',   
                'email': 'john@gmail.com'  
              },  
          ];  
    
  return (  
    <div className="container">  
        <h1> Example of React Map Loop </h1>  
     
        <table className="table table-bordered">  
            <tr>  
                <th>ID</th>  
                <th>Name</th>  
                <th>Email</th>  
            </tr>  
    
            {students.map((student, index) => (  
              <tr data-index={index}>  
                <td>{student.id}</td>  
                <td>{student.name}</td>  
                <td>{student.email}</td>  
              </tr>  
            ))}  
    
        </table>  
    
    </div>  
  );  
}  
    
export default App;  
---------------------------------------------------------------------------------------------------------------------
React Axios Delete Request Example
------------------------------------------------------------------------------
npm install axios
------------------------------------------------
Axios :- It is used for http delete request.We have to use the React library.It can build the interface which can send the http request from our application.
--------------------------------------------------------------------------------------------------------------
example-12
-----------------------------------------------
import React from 'react';  
    
import axios from 'axios';  
    
export default class PostList extends React.Component {  
  state = {  
    posts: []  
  }  
    
  componentDidMount() {  
    axios.get(`https://jsonplaceholder.typicode.com/posts`)  
      .then(res => {  
        const posts = res.data;  
        this.setState({ posts });  
      })  
  }  
    
  deleteRow(id, e){  
    axios.delete(`https://jsonplaceholder.typicode.com/posts/${id}`)  
      .then(res => {  
        console.log(res);  
        console.log(res.data);  
    
        const posts = this.state.posts.filter(item => item.id !== id);  
        this.setState({ posts });  
      })  
    
  }  
    
  render() {  
    return (  
      <div>  
        <h1> Example of React Axios Delete Request </h1>  
    
        <table className="table table-bordered">  
            <thead>  
              <tr>  
                  <th>ID</th>  
                  <th>Title</th>  
                  <th>Body</th>  
                  <th>Action</th>  
              </tr>  
            </thead>  
    
            <tbody>  
              {this.state.posts.map((post) => (  
                <tr>  
                  <td>{post.id}</td>  
                  <td>{post.title}</td>  
                  <td>{post.body}</td>  
                  <td>  
                    <button className="btn btn-danger" onClick={(e) => this.deleteRow(post.id, e)}>Delete</button>  
                  </td>  
                </tr>  
              ))}  
            </tbody>  
    
        </table>  
      </div>  
    )  
  }  
}  
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
Example-14
-----------------------
routing:- It is navigating to different pages.
----------------------------------------------------------------
home.jsx
--------------------------
import React,{ Component } from "react";

class Home extends Component
{
render()
{
return(
    <div>
        <h1>Wwelcome to Home Page</h1>
<table>
<tr><td>Enter your Name</td><td><input type="text" name="t1" size="20"/></td></tr>
<tr><td>Enter your Address</td><td><input type="text" name="t2" size="20"/></td></tr>
<tr><td>Enter your Phoneno</td><td><input type="text" name="t3" size="20"/></td></tr>
<tr><td></td><td><input type="submit" value="submit"/></td></tr>
</table>

    </div>
);
}}

export default Home;
-----------------------------------------------------------
about.jsx
-----------------------
import React,{ Component } from "react";

class About extends Component
{
render()
{
return(
    <div>
        <h1>welcome to About Page</h1>
<table>
<tr><td>Enter your Name</td><td><input type="text" name="t1" size="20"/></td></tr>
<tr><td>Enter your Address</td><td><input type="text" name="t2" size="20"/></td></tr>
<tr><td>Enter your Phoneno</td><td><input type="text" name="t3" size="20"/></td></tr>
<tr><td></td><td><input type="submit" value="submit"/></td></tr>
</table>

    </div>
);
}}

export default About;
----------------------------------------------------------------
topic.jsx 
---------------------------
import React,{ Component } from "react";

class Topic extends Component
{
render()
{
return(
    <div>
    <h2>The Topics of  React.js are</h2>
<ul>
<li>Refs</li>
<li>State</li>
<li>Props</li>
</ul>
</div>
);
}}

export default Topic;
------------------------------------
app.jsx
------------------------
import React,{ Component } from "react";
import {BrowserRouter as Router, Route, Link } from "react-router-dom";
import Home from './Home';
import About from './About';
import Topics from './Topics';


class App extends Component
{
render()
{
return(
<Router>
<div>
<ul>
<li><Link to="/">Home</Link></li>
<li><Link to="/about">About</Link></li>
<li><Link to="/topics">Topics</Link></li>
</ul>
<hr/>
<Route exact path="/" component={Home}/>
<Route exact path="/about" component={About}/>
<Route exact path="/topics" component={Topics}/>
</div>
</Router>
);
}
}
export default App;
-------------------------------------------------------------------------------------------------
React Components
- A component comprises of
a) Presentation
b) Styles
c) Logic
- Presentation is done by using HTML
- Styles are defined by using CSS
- Logic is defined by using JavaScript | JSX | TypeScript
- It is a reusable design with functionality.
- It provides customizable designs.
- Components are building blocks for application.
- React component can be
a) A function
b) A class
--------------------------------------------------------------------------------------------------------
Function Component vs Class Component
Class Component
- It is statefull component.
- It have implicit state configured.
- It is easy to extend.
- It provides various mutable techniques which are easy for desinging a reusable template.
- Properties and Methods
- Accessors with will fine control over the properties in class.
- It uses more memory.
- It is slow in rendering.
- It is complex in configurations.
- It uses lot of dependencies.
------------------------------------------------------------------------------------------------------------
Function Components:
- It is stateless component.
- You have use state explicitly.
- A function provides all immutable members, however you can use state for making it mutable.
- Hard to extend
- It is faster
- It uses less memory
- It is modular.
- It provides various built-in hooks.

------------------------------------------------------------------------------------------------------------------
FAQ: What are Pure and Impure Components?
Ans :
Impure:
- A component created by using "React.Component" is impure.
- It will re-render entire content even when there is no change.
- If a property or state changed then entire component will re-render.
- It is heavy on application
- It is slow in access.
Pure:
- A component created by using "React.PureComponent" is pure.
- It will not re-render entire component if there is no change.
- rendering content will happen only when change occured[state, property]
- It is faster in access
- It improves the performance
- Pure component identifies the changes by using "ChangeDetection" techniques
InitialValue == FinalValue => No Change Detected
InitialValue !== FinalValue => Then Change Detected
- Pure component implicitly verifies initial and final values in a phase called
"ComponentWillUpdate()"
"ComponentDidUpdate()"
- They re-render content only when external state changes.
-----------------------------------------------------------------------------------------------------------------
FAQ: What are pure and impure functions?
Ans: Impure function can modify the values outside function scope.
Syntax: Impure Function
var x = 0;
function Addition(a, b)
{
x = a + b;
}
Addition(10, 20)
console.log(x);
------------------------------------------------------------------------------------------------
Syntax: Pure Function
function Addition(a,b)
{
return a + b;
}
var x = Addition(10,20);
Ex:
import React from "react";
export class PureDemo extends React.PureComponent
{
constructor(){
super();
this.state = {
products: ["TV", "Mobile", "Watch"]
}
}
handleLoadClick(){
alert("hi");
this.setState({
products: ["TV", "Mobile", "Watch", "Shoes"]
})
}
componentDidUpdate(){
console.log("Component Will Render on Update");
}
render(){
return(
<div>
<h2>Pure Component <button 
onClick={this.handleLoadClick.bind(this)}>Load</button> </h2>
<ol>
{
this.state.products.map((product)=>
<li key={product}>{product}</li>
)
}
</ol>
</div>
)
}
}
--------------------------------------------------------------------------------
1. What is React ?
A. It is a JavaScript library used to build UI.
2. What is difference between React and Angular?
A. React is a library.
Angular is a framework.
If your project is about build application with lot of server side frameworks and you want just 
your UI be more effects then "React" is good.
If your project is about building app with minimum use of frameworks in backend
and maximum is expected to handle client side then better "Angular".
Netflix, Amazon, FaceBook, Instagram => React
OS Window Mobile - Angular, PWA
3. Is there any difference between React and React JS?
A. No Difference
4. Is there any difference between Angular and Angular JS?
A. Yes
5. Why we need Angular or React like library and framework to build UI as we already have 
jQuery and JavaScript?
6. What are the challenges in modern web development?
- Unified UX
- Fluid UX
- Loosely coupled and extensible
7. What is solution?
A. Better build SPA [Single Page Applications] - Twitter
8. How to build SPA? Can we use JS, JQ?
A. Yes.
- JS DOM
- Logic, Coding funcitons
- Ajax
9. What is solution?
A. React, Angular, Vue, Knockout, Ember, BackBone etc...
---------------------------------------------------------------------------------------------------
Features of React
1. It is component based.
- It is faster in designing complex UI
- It enables reusability
- It is easy to extend
- It is easy to test
2. It uses Virtual DOM
Browser Architecture
- UI : It describes the browser interface, which includes
title bar, shortcut buttons, addressbar, scroll bar.
- Browser Engine : It translates your HTML.
- Rendering Engine : It presents your markup in browser.
- JavaScript Interpreter : It translated JavaScript - JIT [Just-in-Time]
- Network : It tracks the performance of page
- UI Backend : It defines the backend API's or extentions for browser.
- Data Persistance : It includes storage for browser
a) Local Storage
b) Cookies
c) Session Storage 
d) Shared Storage
- Various browser engines & rendering
v8, chakra, edgeHTML, webkit, spider monkey, gecko etc..
What is DOM?
- It is a hierarchy of presenting elements.
- It refers to Document Object Model.
- It comprises of parent and child nodes.
- Nodes are converted from Tokens
- Tokens are from chars
- Chars are from Bytes
- Bytes are from markup.
What is Shadow DOM?
- It is a hierarchy of nodes in a component.
What is Virutal DOM?
- It is a duplicate copy of actual DOM.
Features of React JS
1. It is component based
2. It uses Virtual DOM
a) DOM
b) Shadow DOM
c) Virtual DOM
3. It is faster.
4. It is modular
- It uses only the library that is required for application.
- It is not legacy.
- Application specific library
- Application light weight
- It uses less memory
5. It uses built-in Async methods [Implicitly Asynchronous]
6. You can easily plugin any 3rd party
------------------------------------------------------------------------------------------------
Issues with react
1. React is not developed for what you are using.
2. Lot of GAP's.
3. Fill the GAP by using 3rd party library
4. Lot of 3rd party libraries are required
5. Pace of development and poor documentation.
---------------------------------------------------------------------------------------------------------------
- You can use react library from CDN, react in HTML page requires 3 libraries
a) react : It is the core library for React.
b) react-dom : It is the library to handle virtual DOM
c) babel : It is JavaScript compiler used by react.
------------------------------------------------------------------------------------------------------
>npm install react --save
>npm install react-dom --save
>npm install @babel/standalone
>npm init -y
> npm install react --save
> npm install react-dom --save
> npm install @babel/standalone --save
> npm install bootstrap --save
> npm install bootstrap-icons --save
> npm install jquery --save
-------------------------------------------------------------------------
Data Binding in React
- It is the process of accessing data from source and binding to UI.
- JavaScript and jQuery can handle data binding using DOM methods and jQuery functions.
var username = "John";
<p> </p>
document.querySelector("p").innerHTML = username
- React uses "Data Binding Expression" => { }
var username = "John";
<p> {username} </p>
- React requires various techniques to bind data which is complex.
a) Primitive Types
number, string, boolean, null, undefined, symbol
b) Non Primitive types
array, object, map
------------------------------------------------------------------
Note: React supports only "One-Way-Binding". There no "Two-Way-Binding".
------------------------------------------------------------------
Data Binding in React
- One Way Binding
Binding Primitive Types : number, string, boolean, null, undefined..
Binding Non Primitive Types : Array, Object, JSON
Note: Don't use variables for storing data in component.
Variables are immutable.
-------------------------------------------------------------------------------
State in React
- Web Applications use "http | https" as protocols.
- Http is a state less protocol.
- It can't remember information between requests.
- State less nature of application is good for server, as it manages memory.
- It is not good for contineous operations.
- You can handle this issue by implementing various state management techniques
a) Application State
b) Session State
c) Cookies
d) QueryString etc..
- React component can manage state for application
- State was available in React upto 17 version only with Class Components.
- React 18+ version introduced state for function components.
- React function component can handle state by using a Hook [method] called 
"useState()".
- useState is not for class component, it is only for function component.
- State is mutable.
Syntax:
import { useState } from "react";
const [getter, setter] = useState(); => any type
const [name] = useState("John"); => string
const [products] = useState([]); => Array
const [product] = useState({}); => Object
----------------------------------------------------------------------------------------------
React API
- useState
- useEffect
- fetch()
useEffect
- It is a react hook that provides following phases
a) Mount
b) Unmount
useEffect(()=>{
// actions on mount
return() {
//actions on unmount
}
}, [ dependencies ])
------------------------------------------------------------------------------
fetch()
- It is a promise of JavaScript.
- It is used to handle communication with API.
Syntax:
fetch("url")
.then(function(response){
return response.json();
})
.then(function(data){
....present data..
})
.catch(function(ex){
...exception...
})
------------------------------------------------------------------------------------------
import { useState, useEffect } from "react";
import "./fakestore.component.css";
export function FakestoreComponent()
{
const [categories, setCategories] = useState([]);
const [products, setProducts] = useState([]);
const [cartItems, setCartItems] = useState([]);
const [cartCount, setCartCount] = useState(0);
function GetCartCount(){
setCartCount(cartItems.length);
}
-------------------------------------------------------------------------------------------
FAQ: What are the issues with Fetch promise?
Ans :
- It returns data in binary format.
- You have to parse the data into JSON format.
- Browser may block COM marshling [Common Object Model]
[ object - to - binary & vice versa ]
- CORS issues [Cross Origin Resource Sharing] 
- Fetch promise is using JavaScript "catch()" which is poor in error handling.
jQuery Ajax with React
- jQuery provides Ajax methods.
- They default return data in JSON
- No conversions required.
- Handle CORS issues
- It reduces the browser compatibility issues.
- It provides lot of Ajax life cycle methods, which can track the ajax process and 
report the errors.
ajaxStart()
ajaxStop()
ajaxSuccess()
ajaxError()
ajaxComplete()
Syntax:
$.ajax({
method : "get | post | put | delete",
url: "path",
data: post data,
success: () => { }
error: () => { }
})
Ex:
1. Install jQuery library for project
>npm install jquery --save
2. Import jquery library into component
import $ from "jquery";
3. Implement Ajax
$.ajax({ })
fakestore.component.jsx
import { useState, useEffect } from "react";
import "./fakestore.component.css";
import $ from "jquery";
export function FakestoreComponent()
{
const [categories, setCategories] = useState([]);
const [products, setProducts] = useState([]);
const [cartItems, setCartItems] = useState([]);
const [cartCount, setCartCount] = useState(0);
function GetCartCount(){
setCartCount(cartItems.length);
}
---------------------------------------------------------------------------------------------------------------
React Axios and Style Binding
axios
- It returns data in JSON
- It good in error handling , more features than jQuery
- It is more secured.
a) Prevent CORS attacks
b) Prevent XSS attacks
c) Cross Page Posting etc..
- It can handle multiple requests simultaneously at the same time.
- It is async, without blocking current request it can process another request.
- It is faster.
--------------------------------------------------------------------------
Style and ClassBinding
- React will not allow to bind inline styles exactly as you defined in DOM.
- React uses virtual DOM and the actual DOM syntax is not allowed.
---------------------------------------------------------------
Style Binding
style={ {attributeName:value, attributeName:value} 
----------------------------------------------------------------------------------------
import { useState } from "react";
export function StyleBinding(){
const [styles, setStyles] = useState({'fontSize':'10px', 'color':'black'})

function handleFontSizeChange(e){
setStyles({
fontSize: e.target.value + "px",
color: styles.color})
}

-------------------------------------------------------------------------------
Class Binding in React
- You can define a CSS class dynamically to any element.
import { useState } from "react";
export function ClassDemoComponent(){
const [cities] = useState(["Delhi","Hyd","Mumbai","Chennai","Bangalore"]);
const [buttonClass, setButtonClass] = useState('bi bi-sort-alpha-down');
--------------------------------------------------------------------------------------------------------
What is Event?
A. Event is a message sent by sender to its subscriber in order to notify change.
2. Which software design pattern Event uses?
A. Event follows a software design pattern called "Observer".
3. What is the mechanism of event?
A. Event uses "Delegate" mechanism, which is function pointer
Various Types of Events
1. Mouse Events
onMouseover
onMouseout
onMousedown
onMouseup
onMousemove
2. Keyboard Events
onKeyup
onKeydown
onKeypress
3. Button Events
onClick
onDblClick
onContextMenu
4. Element State Events
onChange
onBlur
onFocus
onSelectstart
5. Clipboard Events
onCut
onCopy
onPaste
6. FormEvents
onSubmit
onReset
7. TouchEvents
onTouchStart
onTouchEnd
onTouchMove
8. Timer Events
setInterval()
clearInterval()
setTimeout()
clearTimeout()
MouseEvents
- onMouseOver
- onMouseOut
- onMouseUp
- onMouseDown
- onMouseMove
Timer Events
- Mouse Events
- Keyboard Events
- Element State Events
Button Events
onClick Single Click of left button
onDoubleClick Double Click of left button (ondblclick)
onContextMenu Right Click of mouse button
Clipboard Events
onCut
onCopy
onPaste
-----------------------------------------------------------------------------------------------------------------
In React, "state" refers to an object that holds data that can change over time and can affect the rendering of components. State is a fundamental concept in React and plays a crucial role in building dynamic and interactive user interfaces.

Component-Specific Data: Each component in a React application can have its own state. State is used to store data that is specific to a particular component.

Mutable: State is mutable, meaning you can change its value over time. However, it should not be directly modified; instead, you should use the setState method or functional updates to update the state.

Reactive Updates: When the state of a component changes, React will automatically re-render the component to reflect the updated state. This makes it easy to create responsive and dynamic user interfaces.

Initialization: State is typically initialized in the component's constructor or by using React hooks (e.g., useState hook in functional components).

Here's an example of how state is used in a class-based React component:

import React, { Component } from 'react';

class Counter extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
  }

  incrementCount() {
    // To update the state, use this.setState()
    this.setState({ count: this.state.count + 1 });
  }

  render() {
    return (
      <div>
        <p>Count: {this.state.count}</p>
        <button onClick={() => this.incrementCount()}>Increment</button>
      </div>
    );
  }
}

export default Counter;
-----------------------------------------------------------------------------------
In this example, the count property is part of the component's state, and when the "Increment" button is clicked, it updates the state, causing a re-render of the component to display the updated count.

With the introduction of React hooks in functional components, you can also manage state using the useState hook:


import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  const incrementCount = () => {
    // To update the state, use the setCount function
    setCount(count + 1);
  }

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={incrementCount}>Increment</button>
    </div>
  );
}

export default Counter;
---------------------------------------------------------------
In this functional component, the useState hook is used to manage the count state variable, and the setCount function is used to update it when the "Increment" button is clicked.
--------------------------------------------------------------------------------------------------
Props
--------------------------

In React, "props" is a short form of "properties," and it refers to the mechanism for passing data from a parent component to a child component. Props are a way to make components reusable and to configure their behavior and appearance based on the data they receive.

Immutable Data: Props are read-only, meaning that a child component cannot modify the props it receives from its parent. They are intended to be used for one-way data flow, from parent to child.

Component Configuration: Props are commonly used to configure a child component. For example, you might pass data, event handlers, or even other components as props.

Named Arguments: In React, props are passed as named arguments to a component function or constructor. You can access props inside a component using the this.props object in class-based components or as an argument in functional components.

Here's an example of how props are used in React:

// ParentComponent.js
import React from 'react';
import ChildComponent from './ChildComponent';

function ParentComponent() {
  const name = 'John Doe';
  const age = 30;

  return (
    <div>
      <h1>Parent Component</h1>
      <ChildComponent name={name} age={age} />
    </div>
  );
}

export default ParentComponent;
jsx
Copy code
// ChildComponent.js
import React from 'react';

function ChildComponent(props) {
  return (
    <div>
      <h2>Child Component</h2>
      <p>Name: {props.name}</p>
      <p>Age: {props.age}</p>
    </div>
  );
}

export default ChildComponent;
----------------------------------------------------------------
In this example, the ParentComponent passes two props (name and age) to the ChildComponent. The ChildComponent receives these props and renders them within its own content.

You can think of props as a way to configure and customize a component's behavior and appearance without having to modify the component itself. This makes React components highly reusable and composable.
-------------------------------------------------------------------------------------------------------------
Component Properties
- Components a building blocks for application.
- Component comprises of presentation, styles and logic.
- You can re-use any component.
- A component can be customized according to requirements and can be re-used at various 
locations.
- Component can be modified or customized by using Properties.
- Properities are a set of parameters which can modify a function.
- In React function component the parameter is considered as properties, which is an object 
type.
-----------------------------------------------------------------------------------------------------
React Class Components
Polymorphism
- Poly stands for Many
- Morphos stands for Forms
- Configuring an object for various functionalities is know as Polymorphism.
- A object can handle various situations and change behaviour according to state and 
situation.
- Technically polymorphism allows a single base class object to use the memory of multiple derived classes.
Ex:
<script>
class Employee
{
FirstName;
LastName;
Designation;
Print(){
document.write(`${this.FirstName} ${this.LastName} - ${this.Designation} <br>`);
}
}
class Developer extends Employee
{
FirstName = "Raj";
LastName = "Kumar";
Designation = "Developer";
Role = "Developer Role : Build , Debug, Test, Deploy";
Print(){
super.Print();
document.write(this.Role);
}
}
class Admin extends Employee
{
FirstName = "Kiran";
LastName = "Rao";
Designation = "Admin";
Role = "Admin Role : Authorizations";
Print(){
super.Print();
document.write(this.Role);
}
}
class Manager extends Employee
{
FirstName = "Tom";
LastName = "Hanks";
Designation = "Manager";
Role = "Manager Role : Approvals";
Print(){
super.Print();
document.write(this.Role);
}
}
var Employees = new Array(new Developer(), new Admin(), new Manager());
var designation = prompt("Enter Designation");
for(var employee of Employees){
if(employee.Designation==designation){
employee.Print();
}
}
</script>
-------------------------------------------------------------------







